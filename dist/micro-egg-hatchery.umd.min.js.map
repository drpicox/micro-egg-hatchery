{"version":3,"file":"micro-egg-hatchery.umd.min.js","sources":["../src/index.js"],"sourcesContent":["const makeBreedEgg = require('./makeBreedEgg')\n\nfunction hatchEgg(egg, tools, hatchedEggs) {\n  if (hatchedEggs.has(egg)) return\n  egg(tools)\n  hatchedEggs.add(egg)\n}\n\nfunction hatchEggs(eggs, tools, hatchedEggs) {\n  for (let i = 0; i < eggs.length; i++)\n    if (Array.isArray(eggs[i])) hatchEggs(eggs[i], tools, hatchedEggs)\n    else hatchEgg(eggs[i], tools, hatchedEggs)\n}\n\nexport default function hatch(...eggs) {\n  let isHatched = false\n  const hatchedEggs = new Set()\n  const checkNoHatched = () => {\n    if (isHatched) throw new Error('cannot use tools once the egg is hatched')\n  }\n\n  const tools = {\n    tool(name, value) {\n      checkNoHatched()\n      tools[name] =\n        typeof value === 'function'\n          ? (...args) => {\n              checkNoHatched()\n              value(...args)\n            }\n          : value\n    },\n    isHatched() {\n      return isHatched\n    },\n  }\n\n  const [breedEgg, getBreed] = makeBreedEgg()\n\n  hatchEgg(breedEgg, tools, hatchedEggs)\n  hatchEggs(eggs, tools, hatchedEggs)\n  isHatched = true\n  delete tools.tool\n\n  return getBreed()\n}\n"],"names":["makeBreedEgg","require","hatchEgg","egg","tools","hatchedEggs","has","add","hatchEggs","eggs","i","length","Array","isArray","isHatched","Set","checkNoHatched","Error","tool","name","value","breedEgg","getBreed"],"mappings":"uMAAA,IAAMA,EAAeC,QAAQ,kBAE7B,SAASC,EAASC,EAAKC,EAAOC,GACxBA,EAAYC,IAAIH,KACpBA,EAAIC,GACJC,EAAYE,IAAIJ,IAGlB,SAASK,EAAUC,EAAML,EAAOC,OACzB,IAAIK,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC3BE,MAAMC,QAAQJ,EAAKC,IAAKF,EAAUC,EAAKC,GAAIN,EAAOC,GACjDH,EAASO,EAAKC,GAAIN,EAAOC,UAGnB,eACTS,GAAY,EACVT,EAAc,IAAIU,IAClBC,EAAiB,cACjBF,EAAW,MAAM,IAAIG,MAAM,6CAG3Bb,EAAQ,CACZc,cAAKC,EAAMC,GACTJ,IACAZ,EAAMe,GACa,mBAAVC,EACH,WACEJ,IACAI,2BAEFA,GAERN,4BACSA,MAIkBd,IAAtBqB,OAAUC,OAEjBpB,EAASmB,EAAUjB,EAAOC,8BAzBKI,2BAAAA,yBA0B/BD,EAAUC,EAAML,EAAOC,GACvBS,GAAY,SACLV,EAAMc,KAENI"}